# Remember Mistakes
- Always track and remember previous mistakes made during coding sessions. This includes:
  - Logic errors
  - Inefficiencies
  - Violations of coding best practices
- Ensure similar errors are not repeated in future coding sessions.

# Best Practices

## KISS (Keep It Simple, Stupid)
- Principle: Write code that is as simple as possible. Avoid over-complicating solutions.
- Implementation:
  - Avoid complex, nested logic.
  - Keep functions and methods small and focused.
  - Prioritize clarity and readability over cleverness.

## DRY (Don't Repeat Yourself)
- Principle: Avoid duplication of logic or code.
- Implementation:
  - If code appears in multiple places, refactor it into a reusable function or method.
  - Use libraries or modules to abstract commonly used functionality.
  - Apply the "Once and Only Once" rule.

## SOLID Principles
- Principle: Follow the SOLID principles for better object-oriented design.
- Principles:
  1. Single Responsibility Principle: A class should have only one reason to change.
  2. Open/Closed Principle: Software entities should be open for extension but closed for modification.
  3. Liskov Substitution Principle: Objects of a superclass should be replaceable with objects of a subclass.
  4. Interface Segregation Principle: No client should be forced to depend on methods it does not use.
  5. Dependency Inversion Principle: High-level modules should not depend on low-level modules, but both should depend on abstractions.

# Additional Guidelines
- Modularize code: Break down larger tasks into smaller, reusable functions or modules.
- Optimize for maintainability: Ensure that anyone reading the code (including future you) can easily understand, maintain, and extend it.
- Error handling: Make sure that errors are gracefully handled and communicated clearly.

# Instructions
During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.
